# Copyright (c) 2020, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
# %%
from pathlib import Path
import shutil

import pickle
import gzip
import codecs

PICKLE = ".pickle"


class PickleModel:
    @classmethod
    def pickle_trained_model(
        cls,
        trained_model,
        model_prefix,
        pickle_path=Path.cwd(),
        is_h2o_model=False,
        is_binary_model=False,
        is_binary_string=False,
        mlflow_details=None,
    ):
        """
        Write trained model to a binary pickle file, H2O MOJO file, or a binary string object.

        The following files are generated by this function:
            * '*.pickle'
                Binary pickle file containing a trained model.
            * '*.mojo'
                Archived H2O.ai MOJO file containing a trained model.

        Parameters
        ---------------
        trained_model : model or string or Path
            For non-H2O models, this argument contains the model variable. Otherwise,
            this should be the file path of the MOJO file.
        model_prefix : string
            Variable name for the model to be displayed in SAS Open Model Manager
            (i.e. hmeqClassTree + [Score.py || .pickle]).
        pickle_path : string, optional
            File location for the output pickle file. Default is the current
            working directory.
        is_h2o_model : boolean, optional
            Sets whether the model file is an H2O.ai MOJO file. If set as True,
            the MOJO file will be gzipped before uploading to SAS Model Manager.
            The default value is False.
        is_binary_model : boolean, optional
            Sets whether the H2O model provided is a binary model or a MOJO model. By default, False.
        is_binary_string : boolean, optional
            Sets whether the model is to be set as a binary string instead of a pickle file. By default, False.
        mlflow_details : dict, optional
            Model details from an MLFlow model. This dictionary is created by the readMLModelFile function.

        Returns
        -------
        binary_string : binary string
            When the is_binary_string flag is set to True, return a binary string representation of the model instead
            of a pickle or MOJO file.

        """

        if is_binary_string:
            # For models that use a binary string representation
            binary_string = codecs.encode(
                pickle.dumps(trained_model), "base64"
            ).decode()
            return binary_string
        elif mlflow_details:
            # For models imported from MLFlow
            ml_pickle_path = (
                Path(mlflow_details["mlflowPath"]) / mlflow_details["model_path"]
            )
            shutil.copy(ml_pickle_path, pickle_path)
            pzmm_pickle_path = Path(pickle_path) / mlflow_details["model_path"]
            pzmm_pickle_path.rename(Path(pickle_path) / (model_prefix + PICKLE))
        else:
            # For all other model types
            if not is_h2o_model:
                with open(Path(pickle_path) / (model_prefix + PICKLE), "wb") as pFile:
                    pickle.dump(trained_model, pFile)
                print(
                    "Model {} was successfully pickled and saved to {}.".format(
                        model_prefix, Path(pickle_path) / (model_prefix + PICKLE)
                    )
                )
            # For H2O models that are binary files, rename the binary file as a pickle file
            elif is_binary_model:
                binary_file = Path(pickle_path) / model_prefix
                binary_file.rename(binary_file.with_suffix(PICKLE))
            # For H2O models in the MOJO format, gzip the model file and rename it with a .MOJO extension
            else:
                with open(Path(trained_model), "rb") as fileIn, gzip.open(
                    Path(pickle_path) / (model_prefix + ".mojo"), "wb"
                ) as fileOut:
                    fileOut.writelines(fileIn)
                print(
                    "MOJO model {} was successfully gzipped and saved to {}.".format(
                        model_prefix, Path(pickle_path) / (model_prefix + ".mojo")
                    )
                )
